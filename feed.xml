<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://example.com">
  <title>Krik Demo Site</title>
  <link href="https://example.com/feed.xml" rel="self" />
  <link href="https://example.com" />
  <id>https://example.com</id>
  <updated>2025-01-15T12:00:00+00:00</updated>
  <generator uri="https://github.com/mcaserta/krik">Krik</generator>
  <entry>
    <title>Getting Started with Krik: From Installation to Your First Post</title>
    <link href="https://example.com/posts/getting-started-guide.html" />
    <id>https://example.com/posts/getting-started-guide.html</id>
    <updated>2025-01-15T12:00:00+00:00</updated>
    <published>2025-01-15T12:00:00+00:00</published>
    <content type="html"><![CDATA[
<h1>Getting Started with Krik: From Installation to Your First Post</h1>
<p>Welcome to Krik! This comprehensive guide will take you from zero to publishing
your first blog post in just a few minutes. Krik makes it incredibly easy to
create beautiful, fast static websites with minimal setup.</p>
<h2>Installation</h2>
<h3>Quick Install (Recommended)</h3>
<p>The fastest way to get started is installing Krik from crates.io:</p>
<pre><code class="language-bash">cargo install krik
</code></pre>
<p>That’s it! No additional setup required - themes and sample content are embedded
directly in the executable.</p>
<h3>Verify Installation</h3>
<p>Check that Krik is installed correctly:</p>
<pre><code class="language-bash">kk --version
kk --help
</code></pre>
<h2>Creating Your First Site</h2>
<h3>Initialize a New Site</h3>
<p>Create a new blog in just one command:</p>
<pre><code class="language-bash"># Create a new blog directory
kk init my-awesome-blog
cd my-awesome-blog
</code></pre>
<p>This creates a complete site structure with:</p>
<ul>
<li>Sample blog posts and pages</li>
<li>Default theme with light/dark mode</li>
<li>Site configuration</li>
<li>All necessary assets</li>
</ul>
<h3>Start the Development Server</h3>
<p>Launch the development server with live reload:</p>
<pre><code class="language-bash">kk server
</code></pre>
<p>Open your browser to <code>http://localhost:3000</code> and you’ll see your new site! The
server automatically watches for changes and refreshes your browser when you
edit files.</p>
<h2>Creating Content</h2>
<h3>Your First Blog Post</h3>
<p>Create a new blog post with a simple command:</p>
<pre><code class="language-bash">kk post "My First Blog Post"
</code></pre>
<p>This creates <code>content/posts/my-first-blog-post.md</code> with:</p>
<ul>
<li>Proper YAML front matter</li>
<li>Current timestamp</li>
<li>Helpful starter content</li>
<li>Tips for writing</li>
</ul>
<h3>Custom Filenames</h3>
<p>Want a specific filename? Use the <code>--filename</code> option:</p>
<pre><code class="language-bash">kk post "How to Build Amazing Websites" --filename amazing-websites
</code></pre>
<p>This creates <code>amazing-websites.md</code> instead of the auto-generated filename.</p>
<h3>Creating Pages</h3>
<p>Pages are perfect for static content like About, Contact, or Documentation:</p>
<pre><code class="language-bash">kk page "About Me"
kk page "Contact" --filename contact
</code></pre>
<p>Pages are created in <code>content/pages/</code> and use the page template automatically.</p>
<h2>Customizing Your Content</h2>
<h3>Front Matter Explained</h3>
<p>Every post and page starts with YAML front matter:</p>
<pre><code class="language-yaml">---
title: "Your Post Title"
date: 2025-01-15T12:00:00Z
layout: post # or 'page' for pages
tags: ["tutorial", "guide"] # helps categorize content
toc: true # enables table of contents
draft: false # set to true to hide from site
---
</code></pre>
<h3>Adding Your Content</h3>
<p>Below the front matter, write your content in Markdown:</p>
<pre><code class="language-markdown"># Main Heading

Your content here with **bold text**, _italic text_, and
[links](https://example.com).

## Subheadings

- Lists work great
- Easy to read
- Organize your thoughts

### Code Examples

```javascript
console.log("Code highlighting works automatically!");
```
</code></pre>
<pre><code>
### Markdown Features

Krik supports rich Markdown including:

- **Tables** with automatic styling
- **Footnotes** with bidirectional navigation
- **Code highlighting** for 100+ languages
- **Math expressions** (LaTeX support)
- **Task lists** with checkboxes

## Publishing Your Site

### Generate Static Files

When you're ready to publish, generate static files:

```bash
kk
</code></pre>
<p>This creates the <code>_site/</code> directory with your complete website. Upload these
files to any web host!</p>
<h3>Development vs Production</h3>
<p>During development, use the server:</p>
<pre><code class="language-bash">kk server                    # Live reload for development
kk server --no-live-reload   # Disable live reload if needed
</code></pre>
<p>For production builds:</p>
<pre><code class="language-bash">kk --input content --output _site --theme themes/default
</code></pre>
<h2>Advanced Features</h2>
<h3>Internationalization</h3>
<p>Create translations by adding language codes to filenames:</p>
<pre><code class="language-bash"># Create English version
kk post "Welcome to My Blog"

# Create Italian translation (manually)
cp content/posts/welcome-to-my-blog.md content/posts/welcome-to-my-blog.it.md
# Edit the Italian version
</code></pre>
<h3>Table of Contents</h3>
<p>Enable automatic TOC generation by adding <code>toc: true</code> to your front matter.
Perfect for long articles like this one!</p>
<h3>Theme Customization</h3>
<p>The default theme includes:</p>
<ul>
<li>Automatic light/dark mode detection</li>
<li>Responsive design for all devices</li>
<li>Mobile-friendly hamburger menu</li>
<li>Smooth scroll-to-top button</li>
<li>Professional typography</li>
</ul>
<h2>Tips for Success</h2>
<h3>Writing Great Content</h3>
<ol>
<li><strong>Use descriptive titles</strong> - They appear in navigation and feeds</li>
<li><strong>Add relevant tags</strong> - Helps organize and categorize your posts</li>
<li><strong>Include dates</strong> - Keeps your content chronologically organized</li>
<li><strong>Enable TOC for long posts</strong> - Improves navigation</li>
<li><strong>Use drafts</strong> - Set <code>draft: true</code> while working on content</li>
</ol>
<h3>Workflow Optimization</h3>
<ol>
<li><strong>Start with the development server</strong>: <code>kk server</code></li>
<li><strong>Create content quickly</strong>: <code>kk post "Title"</code> or <code>kk page "Title"</code></li>
<li><strong>Edit in your favorite editor</strong> - Changes appear instantly in browser</li>
<li><strong>Generate when ready</strong>: <code>kk</code> to create static files</li>
</ol>
<h3>Organization Best Practices</h3>
<ul>
<li>Use <code>/posts/</code> for time-sensitive content (blog posts, news, updates)</li>
<li>Use <code>/pages/</code> for static content (about, contact, documentation)</li>
<li>Keep images organized in <code>/images/</code> subdirectories</li>
<li>Use consistent naming conventions for translations</li>
</ul>
<h2>Next Steps</h2>
<p>Now that you have Krik set up:</p>
<ol>
<li><strong>Customize your site.toml</strong> with your information</li>
<li><strong>Replace sample content</strong> with your own posts and pages</li>
<li><strong>Explore the theme system</strong> for advanced customization</li>
<li><strong>Set up deployment</strong> to your preferred hosting platform</li>
</ol>
<h2>Getting Help</h2>
<ul>
<li><strong>Documentation</strong>: Check the comprehensive documentation page on this site</li>
<li><strong>Examples</strong>: Explore the sample posts to see features in action</li>
<li><strong>Community</strong>: Join discussions on GitHub</li>
</ul>
<hr />
<p>Congratulations! You now have everything you need to create amazing static
websites with Krik. The combination of powerful features and simple commands
makes it easy to focus on what matters most: your content.</p>
<p>Happy blogging! 🚀</p>

    ]]></content>
    <category term="tutorial" />
    <category term="getting-started" />
    <category term="guide" />
  </entry>
  <entry>
    <title>Advanced Features Demo</title>
    <link href="https://example.com/posts/advanced-features.html" />
    <id>https://example.com/posts/advanced-features.html</id>
    <updated>2024-01-22T11:45:00+00:00</updated>
    <published>2024-01-22T11:45:00+00:00</published>
    <content type="html"><![CDATA[
<h1>Advanced Features Demo</h1>
<p>This post demonstrates some of the more advanced features available in Krik,
including image handling, complex markdown, and feed generation.</p>
<h2>Image Support</h2>
<p>Krik automatically copies images and other static assets to the generated site:</p>
<p><img src="../images/placeholder.svg" alt="Placeholder Image" title="This is a placeholder image" /></p>
<h3>Image Best Practices</h3>
<p>When adding images to your posts:</p>
<ul>
<li>Store images in the <code>content/images/</code> directory</li>
<li>Use descriptive filenames</li>
<li>Include alt text for accessibility</li>
<li>Optionally include title text for tooltips</li>
<li>Consider using relative paths from your post location</li>
</ul>
<h2>Complex Tables</h2>
<p>Here’s a more complex table showing Krik’s architecture:</p>
<table><thead><tr><th>Component</th><th>Language</th><th>Purpose</th><th>Dependencies</th></tr></thead><tbody>
<tr><td><strong>Parser</strong></td><td>Rust</td><td>Markdown → AST</td><td>pulldown-cmark, serde</td></tr>
<tr><td><strong>Generator</strong></td><td>Rust</td><td>AST → HTML</td><td>tera, chrono</td></tr>
<tr><td><strong>Theme</strong></td><td>CSS/JS</td><td>Styling &amp; UX</td><td>Native browser APIs</td></tr>
<tr><td><strong>i18n</strong></td><td>Rust</td><td>Multi-language</td><td>HashMap collections</td></tr>
<tr><td><strong>Feed</strong></td><td>Rust</td><td>Atom generation</td><td>XML serialization</td></tr>
</tbody></table>
<h2>Nested Lists and Complex Formatting</h2>
<h3>Project Structure</h3>
<ol>
<li><strong>Core Engine</strong> (Rust)
<ul>
<li>Markdown parsing with pulldown-cmark</li>
<li>Template rendering with Tera</li>
<li>File system operations</li>
</ul>
</li>
<li><strong>Theme System</strong>
<ul>
<li>CSS custom properties for theming</li>
<li>JavaScript for interactive features:
<ul>
<li>Theme toggle functionality</li>
<li>Footnote navigation</li>
<li>Scroll-to-top behavior</li>
</ul>
</li>
<li>Responsive design breakpoints</li>
</ul>
</li>
<li><strong>Content Processing</strong>
<ul>
<li>Front matter parsing (YAML)</li>
<li>Asset copying (images, files)</li>
<li>Language detection from filenames</li>
<li>Table of contents generation</li>
</ul>
</li>
</ol>
<h3>Advanced Markdown Features</h3>
<h4>Mixed Content Types</h4>
<p>You can combine different content types effectively:</p>
<blockquote>
<p><strong>Quote with formatting</strong>: This blockquote contains <em>italic</em>, <strong>bold</strong>, and
<code>inline code</code>.</p>
<p>It can also contain lists:</p>
<ol>
<li>First quoted item</li>
<li>Second quoted item</li>
</ol>
<p>And even code blocks:</p>
<pre><code class="language-rust">println!("Code in quotes!");
</code></pre>
</blockquote>
<h4>Code with Explanation</h4>
<p>Here’s how the theme toggle works:</p>
<pre><code class="language-javascript">function toggleTheme() {
  // Get current theme or default to light
  const currentTheme =
    document.documentElement.getAttribute("data-theme") || "light";

  // Switch to opposite theme
  const newTheme = currentTheme === "light" ? "dark" : "light";

  // Apply new theme
  document.documentElement.setAttribute("data-theme", newTheme);

  // Save preference
  localStorage.setItem("theme", newTheme);

  // Update toggle icon
  updateThemeIcon(newTheme);
}
</code></pre>
<p>The key aspects of this implementation:</p>
<ul>
<li>Uses <code>data-theme</code> attribute on the root element</li>
<li>Leverages localStorage for persistence</li>
<li>Provides smooth CSS transitions</li>
<li>Works across page reloads</li>
</ul>
<h2>Feed Generation Details</h2>
<p>Krik automatically generates an Atom feed (<code>feed.xml</code>) that includes:</p>
<h3>Feed Metadata</h3>
<ul>
<li>Site title from <code>site.toml</code></li>
<li>Last updated timestamp</li>
<li>Self-referencing links</li>
<li>Unique feed ID</li>
</ul>
<h3>Post Entries</h3>
<ul>
<li>Only posts (not pages) are included</li>
<li>Limited to 20 most recent posts</li>
<li>Full HTML content with proper escaping</li>
<li>Individual post IDs and timestamps</li>
<li>Tag information (when available)</li>
</ul>
<h3>Link Resolution</h3>
<p>When <code>base_url</code> is configured in <code>site.toml</code>, Krik uses the <code>xml:base</code> attribute
for proper link resolution:</p>
<pre><code class="language-xml">&lt;feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://example.com"&gt;
</code></pre>
<p>This ensures that relative links in your posts work correctly when viewed in
feed readers.</p>
<h2>Performance Considerations</h2>
<h3>Build Performance</h3>
<p>Krik is designed for speed:</p>
<ul>
<li><strong>Rust Performance</strong>: Native speed with zero-cost abstractions</li>
<li><strong>Parallel Processing</strong>: Multi-threaded where possible</li>
<li><strong>Incremental Building</strong>: Only processes changed files (planned feature)</li>
<li><strong>Memory Efficiency</strong>: Streaming processing for large sites</li>
</ul>
<h3>Runtime Performance</h3>
<p>The generated sites are optimized for performance:</p>
<ul>
<li><strong>Minimal CSS</strong>: No framework bloat, only necessary styles</li>
<li><strong>Progressive Enhancement</strong>: JavaScript enhances but isn’t required</li>
<li><strong>Responsive Images</strong>: Proper sizing and format recommendations</li>
<li><strong>Static Assets</strong>: Everything is static, no server-side processing</li>
</ul>
<h2>Accessibility Features</h2>
<p>Krik generates accessible HTML by default:</p>
<h3>Semantic Structure</h3>
<ul>
<li>Proper heading hierarchy (H1 → H2 → H3)</li>
<li>Landmark elements (nav, main, aside)</li>
<li>List structures for navigation</li>
</ul>
<h3>Interactive Elements</h3>
<ul>
<li>ARIA labels on buttons and controls</li>
<li>Focus indicators for keyboard navigation</li>
<li>Skip links for screen readers (planned)</li>
</ul>
<h3>Content Accessibility</h3>
<ul>
<li>Alt text support for images</li>
<li>Table headers and captions</li>
<li>High contrast color schemes</li>
</ul>
<hr />
<p>This demonstrates many of Krik’s advanced capabilities. The combination of
performance, features, and accessibility makes it an excellent choice for modern
static sites.</p>

    ]]></content>
    <category term="advanced" />
    <category term="images" />
    <category term="feeds" />
  </entry>
  <entry>
    <title>Markdown Feature Showcase</title>
    <link href="https://example.com/posts/markdown-showcase.html" />
    <id>https://example.com/posts/markdown-showcase.html</id>
    <updated>2024-01-20T14:30:00+00:00</updated>
    <published>2024-01-20T14:30:00+00:00</published>
    <content type="html"><![CDATA[
<h1>Markdown Feature Showcase</h1>
<p>This post demonstrates all the markdown features supported by Krik, including
some advanced formatting options.</p>
<h2>Basic Text Formatting</h2>
<p>Here are the basic text formatting options:</p>
<ul>
<li><strong>Bold text</strong> using <code>**bold**</code></li>
<li><em>Italic text</em> using <code>*italic*</code></li>
<li><del>Strikethrough text</del> using <code>~~strikethrough~~</code></li>
<li><code>Inline code</code> using backticks</li>
<li>You can also combine <strong><em>bold and italic</em></strong> text</li>
</ul>
<h2>Headings</h2>
<p>Krik supports all heading levels from H1 to H6. Since this post has TOC enabled,
you can see how they’re organized in the table of contents.</p>
<h3>This is H3</h3>
<h4>This is H4</h4>
<h5>This is H5</h5>
<h6>This is H6</h6>
<h2>Code Blocks</h2>
<h3>Syntax Highlighting Ready</h3>
<pre><code class="language-rust">// Rust code example
struct Config {
    title: String,
    base_url: Option&lt;String&gt;,
}

impl Config {
    fn new(title: &amp;str) -&gt; Self {
        Self {
            title: title.to_string(),
            base_url: None,
        }
    }
}
</code></pre>
<pre><code class="language-python"># Python code example
def generate_site(input_dir, output_dir):
    """Generate static site from markdown files."""
    for file in input_dir.glob("**/*.md"):
        process_markdown_file(file, output_dir)

    print("Site generated successfully!")
</code></pre>
<pre><code class="language-html">&lt;!-- HTML code example --&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;title&gt;Krik Demo&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Hello, World!&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2>Lists and Task Lists</h2>
<h3>Unordered Lists</h3>
<ul>
<li>First level item</li>
<li>Another first level item
<ul>
<li>Second level item</li>
<li>Another second level item
<ul>
<li>Third level item</li>
<li>Another third level item</li>
</ul>
</li>
</ul>
</li>
<li>Back to first level</li>
</ul>
<h3>Ordered Lists</h3>
<ol>
<li>First numbered item</li>
<li>Second numbered item
<ol>
<li>Nested numbered item</li>
<li>Another nested item</li>
</ol>
</li>
<li>Third numbered item</li>
</ol>
<h3>Task Lists</h3>
<ul>
<li><input disabled="" type="checkbox" checked=""/>
Completed task</li>
<li><input disabled="" type="checkbox" checked=""/>
Another completed task</li>
<li><input disabled="" type="checkbox"/>
Incomplete task</li>
<li><input disabled="" type="checkbox"/>
Another incomplete task
<ul>
<li><input disabled="" type="checkbox" checked=""/>
Nested completed task</li>
<li><input disabled="" type="checkbox"/>
Nested incomplete task</li>
</ul>
</li>
</ul>
<h2>Tables</h2>
<p>Here’s a comprehensive table showing Krik’s features:</p>
<table><thead><tr><th>Feature Category</th><th>Feature</th><th>Status</th><th>Description</th></tr></thead><tbody>
<tr><td><strong>Core</strong></td><td>Markdown Processing</td><td>✅</td><td>Full GFM support</td></tr>
<tr><td><strong>Core</strong></td><td>Front Matter</td><td>✅</td><td>YAML metadata</td></tr>
<tr><td><strong>Core</strong></td><td>Draft Support</td><td>✅</td><td>Skip processing</td></tr>
<tr><td><strong>Theme</strong></td><td>Light/Dark Mode</td><td>✅</td><td>Auto-detection + toggle</td></tr>
<tr><td><strong>Theme</strong></td><td>Responsive Design</td><td>✅</td><td>Mobile-first approach</td></tr>
<tr><td><strong>i18n</strong></td><td>Multi-language</td><td>✅</td><td>Filename-based detection</td></tr>
<tr><td><strong>i18n</strong></td><td>Language Selector</td><td>✅</td><td>Dropdown navigation</td></tr>
<tr><td><strong>Navigation</strong></td><td>TOC Generation</td><td>✅</td><td>Auto-generated from headings</td></tr>
<tr><td><strong>Navigation</strong></td><td>Footnote Links</td><td>✅</td><td>Bidirectional navigation</td></tr>
<tr><td><strong>Navigation</strong></td><td>Scroll to Top</td><td>✅</td><td>Smart visibility</td></tr>
<tr><td><strong>Advanced</strong></td><td>Atom Feeds</td><td>✅</td><td>RFC 4287 compliant</td></tr>
<tr><td><strong>Advanced</strong></td><td>Asset Copying</td><td>✅</td><td>Preserves structure</td></tr>
</tbody></table>
<h2>Blockquotes</h2>
<blockquote>
<p>This is a simple blockquote.</p>
</blockquote>
<blockquote>
<p>This is a multi-line blockquote. It can span multiple lines and even include
other markdown elements.</p>
<p>Like <strong>bold text</strong> and <em>italic text</em>.</p>
</blockquote>
<blockquote>
<h3>Blockquotes with headings</h3>
<p>You can include headings in blockquotes:</p>
<ol>
<li>Numbered lists</li>
<li>Work too</li>
</ol>
<pre><code>Even code blocks!
</code></pre>
</blockquote>
<h2>Horizontal Rules</h2>
<p>You can create horizontal rules using three or more hyphens:</p>
<hr />
<p>Or three or more asterisks:</p>
<hr />
<h2>Links</h2>
<ul>
<li><a href="https://www.rust-lang.org/">External link to Rust</a></li>
<li><a href="welcome.html">Link to another post</a></li>
<li><a href="https://www.rust-lang.org/" title="The Rust Programming Language">Link with title</a></li>
</ul>
<h3>Reference Links</h3>
<p>This is a paragraph with <a href="https://www.rust-lang.org/" title="Rust Programming Language">reference link</a> and another <a href="https://github.com/" title="GitHub">link</a>.</p>
<h2>Images</h2>
<p>Here’s how images work (note: no actual image file in this demo):</p>
<p><img src="../images/example.png" alt="Alt text for image" title="Optional title" /></p>
<h2>Footnotes in Detail</h2>
<p>Footnotes are particularly powerful in Krik<sup class="footnote-reference"><a href="#footnote1">1</a></sup>. They create
bidirectional links with smooth scrolling<sup class="footnote-reference"><a href="#complex-footnote">2</a></sup>.</p>
<p>You can have multiple paragraphs in footnotes<sup class="footnote-reference"><a href="#multiline">3</a></sup>, and they support full
markdown formatting.</p>
<h2>Escaping Characters</h2>
<p>Sometimes you need to escape markdown characters: *not italic*, `not code`,
[not a link].</p>
<hr />
<p>This covers most of the markdown features supported by Krik. The combination of
these features with the theme system, internationalization, and advanced
navigation makes Krik a powerful choice for static site generation.</p>
<div class="footnote-definition" id="footnote1"><sup class="footnote-definition-label">1</sup>
<p>This is a simple footnote that demonstrates the basic functionality.</p>
</div>
<div class="footnote-definition" id="complex-footnote"><sup class="footnote-definition-label">2</sup>
<p>This footnote contains <strong>bold text</strong>, <em>italic text</em>, and even <code>inline code</code>.
It shows how footnotes can contain rich formatting.</p>
</div>
<div class="footnote-definition" id="multiline"><sup class="footnote-definition-label">3</sup>
<p>This is a multiline footnote.</p>
<p>It can contain multiple paragraphs, code blocks, and other markdown
elements:</p>
<pre><code>code in footnotes works too!
</code></pre>
<p>Pretty neat, right?</p>
</div>

    ]]></content>
    <category term="markdown" />
    <category term="features" />
    <category term="demo" />
  </entry>
  <entry>
    <title>Theme System Demo</title>
    <link href="https://example.com/posts/theme-demo.html" />
    <id>https://example.com/posts/theme-demo.html</id>
    <updated>2024-01-18T09:15:00+00:00</updated>
    <published>2024-01-18T09:15:00+00:00</published>
    <content type="html"><![CDATA[
<h1>Theme System Demo</h1>
<p>This post showcases Krik’s powerful theme system with automatic light/dark mode
detection and smooth transitions.</p>
<h2>Automatic Theme Detection</h2>
<p>Krik automatically detects your operating system’s theme preference:</p>
<ul>
<li><strong>macOS</strong>: Follows System Preferences → General → Appearance</li>
<li><strong>Windows</strong>: Follows Settings → Personalization → Colors → Choose your color</li>
<li><strong>Linux</strong>: Follows your desktop environment’s theme setting</li>
<li><strong>Mobile</strong>: Follows iOS/Android system theme</li>
</ul>
<h2>Manual Theme Toggle</h2>
<p>Look for the 🌙/☀️ button in the top navigation bar. Clicking it will:</p>
<ol>
<li>Toggle between light and dark modes</li>
<li>Save your preference to localStorage</li>
<li>Override the automatic OS detection</li>
<li>Animate the transition smoothly</li>
</ol>
<h2>Theme Features</h2>
<h3>Color Scheme</h3>
<p>The theme system uses CSS custom properties for easy customization:</p>
<p><strong>Light Mode Colors:</strong></p>
<ul>
<li>Background: Clean white and light grays</li>
<li>Text: Dark grays for excellent readability</li>
<li>Links: Blue tones for accessibility</li>
<li>Surfaces: Subtle shadows and borders</li>
</ul>
<p><strong>Dark Mode Colors:</strong></p>
<ul>
<li>Background: Deep grays and blacks</li>
<li>Text: Light grays and whites</li>
<li>Links: Lighter blue tones</li>
<li>Surfaces: Darker shadows with subtle highlights</li>
</ul>
<h3>Responsive Design</h3>
<p>The theme adapts to different screen sizes:</p>
<ul>
<li><strong>Desktop</strong>: Full sidebar navigation and wide content area</li>
<li><strong>Tablet</strong>: Collapsible navigation with optimized spacing</li>
<li><strong>Mobile</strong>: Touch-friendly interface with larger tap targets</li>
</ul>
<h3>Smooth Transitions</h3>
<p>All theme changes animate smoothly with 0.3-second transitions on:</p>
<ul>
<li>Background colors</li>
<li>Text colors</li>
<li>Border colors</li>
<li>Shadow effects</li>
<li>Button states</li>
</ul>
<h2>Cross-Platform Support</h2>
<p>The theme detection works across:</p>
<ul>
<li><strong>Browsers</strong>: Chrome, Firefox, Safari, Edge</li>
<li><strong>Operating Systems</strong>: Windows, macOS, Linux, iOS, Android</li>
<li><strong>Devices</strong>: Desktop, laptop, tablet, smartphone</li>
</ul>
<h2>Accessibility</h2>
<p>The theme system is designed with accessibility in mind:</p>
<ul>
<li><strong>High Contrast</strong>: Both themes meet WCAG guidelines</li>
<li><strong>Focus Indicators</strong>: Clear focus states for keyboard navigation</li>
<li><strong>Screen Readers</strong>: Proper ARIA labels and semantic HTML</li>
<li><strong>Color Independence</strong>: Information isn’t conveyed by color alone</li>
</ul>
<p>Try switching between light and dark modes to see the smooth transitions in
action!</p>

    ]]></content>
    <category term="themes" />
    <category term="design" />
    <category term="css" />
  </entry>
  <entry>
    <title>Welcome to Krik</title>
    <link href="https://example.com/posts/welcome.html" />
    <id>https://example.com/posts/welcome.html</id>
    <updated>2024-01-15T10:00:00+00:00</updated>
    <published>2024-01-15T10:00:00+00:00</published>
    <content type="html"><![CDATA[
<h1>Welcome to Krik</h1>
<p><img src="../images/krik.png" alt="Krik logo" /></p>
<p>Welcome to the <strong>Krik</strong> static site generator! This post demonstrates many of
the features available in this fast, Rust-powered static site generator.</p>
<h2>Table of Contents</h2>
<p>This post has a table of contents enabled via <code>toc: true</code> in the front matter.
You should see a TOC in the sidebar with clickable links to each section.</p>
<h2>Markdown Features</h2>
<p>Krik supports full <strong>GitHub Flavored Markdown</strong> with many enhancements:</p>
<h3>Text Formatting</h3>
<p>You can use <em>italic text</em>, <strong>bold text</strong>, <del>strikethrough</del>, and <code>inline code</code>.</p>
<h3>Lists</h3>
<p>Unordered lists:</p>
<ul>
<li>First item</li>
<li>Second item
<ul>
<li>Nested item</li>
<li>Another nested item</li>
</ul>
</li>
<li>Third item</li>
</ul>
<p>Ordered lists:</p>
<ol>
<li>First step</li>
<li>Second step</li>
<li>Third step</li>
</ol>
<h3>Code Blocks</h3>
<pre><code class="language-rust">fn main() {
    println!("Hello, Krik!");
}
</code></pre>
<pre><code class="language-javascript">// Theme toggle functionality
function toggleTheme() {
  const currentTheme =
    document.documentElement.getAttribute("data-theme") || "light";
  const newTheme = currentTheme === "light" ? "dark" : "light";
  document.documentElement.setAttribute("data-theme", newTheme);
  localStorage.setItem("theme", newTheme);
}
</code></pre>
<h3>Tables</h3>
<table><thead><tr><th>Feature</th><th>Status</th><th>Description</th></tr></thead><tbody>
<tr><td>Markdown</td><td>✅</td><td>Full GFM support</td></tr>
<tr><td>Themes</td><td>✅</td><td>Light/dark mode</td></tr>
<tr><td>i18n</td><td>✅</td><td>Multi-language</td></tr>
<tr><td>Feeds</td><td>✅</td><td>Atom/RSS feeds</td></tr>
<tr><td>Dev Server</td><td>✅</td><td>Live reload &amp; file watching</td></tr>
<tr><td>Site Init</td><td>✅</td><td>Embedded content &amp; themes</td></tr>
<tr><td>Content Creation</td><td>✅</td><td>Quick post &amp; page generation</td></tr>
</tbody></table>
<h3>Footnotes</h3>
<p>This is a paragraph with a footnote<sup class="footnote-reference"><a href="#1">1</a></sup>. You can click on it to jump to the
definition, and then click the return arrow to come back.</p>
<p>Here’s another footnote<sup class="footnote-reference"><a href="#second">2</a></sup> with different content.</p>
<h2>Advanced Features</h2>
<h3>Theme System</h3>
<p>The site automatically detects your OS theme preference and switches between
light and dark modes. Try toggling your system theme or use the theme button in
the top navigation!</p>
<h3>Scroll to Top</h3>
<p>On longer pages like this one, you’ll see a scroll-to-top button appear in the
bottom-right corner when you scroll down. It provides smooth scrolling back to
the top.</p>
<h3>Navigation</h3>
<p>The sidebar shows all pages on your site, and posts like this one include a
“Back to Home” link for easy navigation. On mobile devices, the sidebar
transforms into a convenient hamburger menu.</p>
<h3>Development Server</h3>
<p>Krik includes a powerful development server with live reload functionality:</p>
<pre><code class="language-bash">kk server                    # Start with live reload
kk server --no-live-reload   # Mobile-safe mode for Safari/iPad
</code></pre>
<p>The server automatically watches for changes and refreshes your browser, making
development fast and efficient.</p>
<h3>Content Creation</h3>
<p>Create new content quickly with built-in commands:</p>
<pre><code class="language-bash">kk post "My New Blog Post"   # Create a new blog post
kk page "About Us"           # Create a new page
</code></pre>
<p>Both commands generate files with proper front matter and helpful starter
content.</p>
<hr />
<p>This is just the beginning! Check out the other posts and pages to see more
features in action, or try the new commands to create your own content.</p>
<div class="footnote-definition" id="1"><sup class="footnote-definition-label">1</sup>
<p>This is the first footnote. Click the return arrow (↩) to go back to the
text.</p>
</div>
<div class="footnote-definition" id="second"><sup class="footnote-definition-label">2</sup>
<p>This is the second footnote with some additional content to show how
multiple footnotes work.</p>
</div>

    ]]></content>
    <category term="welcome" />
    <category term="static-site" />
    <category term="rust" />
  </entry>
</feed>
